def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger'
]

pipeline {
    agent { label 'slave-1' }
    environment {
        SCANNER_HOME = tool 'sonarqube'
    }
    stages {
        stage('git checkout') {
            steps {
                git 'https://github.com/RagavMuthukumar/java-spring-boot.git'
            }
        }
        stage('compile') {
            steps {
                sh 'mvn clean compile'
            }
        }
        stage('code analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=java-spring-boot \
                    -Dsonar.java.binaries=. \
                    -Dsonar.projectKey=java-spring-boot'''
                }
            }
        }
        stage('docker build') {
            steps {
                script {
                    sh 'docker build -t java-spring-2 .'
                }
            }
        }
        stage('docker push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-hub-credential', toolName: 'docker'){
                    sh 'docker tag java-spring-2 ragavmuthukumar/java-spring'
                    sh 'docker push ragavmuthukumar/java-spring'
                    }  
                }
            }
        }
        stage('docker container') {
            steps {
                script {
                    sh 'docker run -itd -p 8087:8080 java-spring-2'
                }
            }
        }
    }
    post {
        always {
            echo 'slack Notification.'
            slackSend(
                channel: '#ci-cd',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \nMore info at: ${env.BUILD_URL}"
            )
        }
    }
}
